@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h1 class="display-4">Administration</h1>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <div class="form-group">
                <input class="form-control" type="text" placeholder="Search..." @bind="Filter" @bind:event="oninput" style="width: 300px">
            </div>
            <br />

            <table class="table">
                <thead class="table-light">
                    <tr>
                        <th>User Name</th>
                        <th>Email</th>
                        <th><button class="btn btn-dark" @onclick="AddNewUser">Add new user</button></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in ColUsers)
                    {
                        @if (!IsUserVisible(user))
                             continue;

                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                <button class="btn btn-primary"@onclick="() => EditUser(user)">Edit</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @if (ShowPopup)
            {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Edit User</h3>

                            <button type="button" class="close" @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>

                        </div>
                        <div class="modal-body">
                           
                            @if (objUser.Id != "")
                            {
                                <p>@objUser.Id</p>
                            }
                            
                            @if (objUser.Id != "")
                            {
                                <p>@objUser.UserName</p>
                            }
                            else
                            {
                                <input class="form-control" type="text" placeholder="UserName" @bind="objUser.UserName" />
                            }
                            <input class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                            <input class="form-control" type="password" placeholder="Password" @bind="objUser.PasswordHash" />
                            <select class="form-control" @bind="@CurrentUserRole">
                                @foreach (var option in Options)
                                {
                                    <option value="@option">@option</option>
                                }
                            </select>
                            <br /><br />
                            
                            <button class="btn btn-primary"@onclick="SaveUser">Save</button>
                            
                            @if (objUser.Id != "")
                            {
                                <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
                            }
                            <br />
                            <span style="color:red">@strError</span>
                        </div>
                    </div>
                </div>
            </div>
            }

        }
        else
        {
            <p>You are not an administrator.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;

        GetUsers();
    }

    public async Task CheckRole(IdentityUser user)
    {
        UserRole = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
        Console.WriteLine(user.Email + " is " + UserRole);
    }

    IdentityUser objUser = new IdentityUser();
    string CurrentUserRole { get; set; } = "Users";
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    List<string> Options = new List<string>() { "Users", "Administrators" };
    string strError = "";
    bool ShowPopup = false;
    bool UserRole = false;
    public string Filter { get; set; }

    void AddNewUser()
    {
        
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        
        objUser.Id = "";
        
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            
            if (objUser.Id != "")
            {
                
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                
                user.Email = objUser.Email;
                
                await _UserManager.UpdateAsync(user);
                
                
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser = await _UserManager.ResetPasswordAsync(user, resetToken, objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError = passworduser.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        
                        return;
                    }
                }
                
                
                var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

                if ((CurrentUserRole == ADMINISTRATION_ROLE) & (!UserResult))
                {
                    
                    await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    
                    
                    if ((CurrentUserRole != ADMINISTRATION_ROLE) & (UserResult))
                    {
                        await _UserManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }
            }
            else
            {
                var NewUser = new IdentityUser
                    {
                        UserName = objUser.UserName,
                        Email = objUser.Email
                    };
                var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    
                    return;
                }
                else
                {
                    
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        
                        await _UserManager.AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                }
            }
            
            ShowPopup = false;
            
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(IdentityUser _IdentityUser)
    {
        objUser = _IdentityUser;
        
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            
            await _UserManager.DeleteAsync(user);
        }
        
        GetUsers();
    }
    void ClosePopup()
    {
        
        ShowPopup = false;
    }

    public void GetUsers()
    {
        
        strError = "";
        
        ColUsers = new List<IdentityUser>();
        
        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }

    bool IsUserVisible(IdentityUser user)
    {
        if(string.IsNullOrEmpty(Filter))
            return true;

        if (user.Email.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

}
